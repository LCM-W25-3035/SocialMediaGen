# -*- coding: utf-8 -*-
"""zeroshot_classifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W0x2PD0xFwclnsTt59NfOQtz_mDsEwJ6
"""

pip install transformers pymongo

from transformers import pipeline
from pymongo import MongoClient
from datetime import datetime

def main():
    # Connect to MongoDB
    client = MongoClient("mongodb+srv://Govind:Qwerty1234@projectnewsanalytics.kdevn.mongodb.net/?retryWrites=true&w=majority&appName=ProjectNewsAnalytics")
    db = client['news_database']
    input_collection = db['master_news']
    output_collection = db['master_news_cleaned']

    # Define topic labels
    labels = [
        "Finance", "Politics", "Technology", "Sports", "Health",
        "Entertainment", "Environment", "Education", "Travel", "Food"
    ]

    # Use a better zero-shot model with GPU
    classifier = pipeline(
        "zero-shot-classification",
        model="MoritzLaurer/deberta-v3-large-zeroshot-v1",
        device=0
    )

    # Parameters
    batch_size = 32
    confidence_threshold = 0.7

    docs = list(input_collection.find())

    for i in range(0, len(docs), batch_size):
        batch = docs[i:i + batch_size]
        batch = [doc for doc in batch if "topic" not in doc]  # Avoid duplicates

        if not batch:
            continue

        texts = [
            f"{doc.get('headline', '')} {doc.get('summary', '')}".strip()
            for doc in batch
        ]

        results = classifier(texts, labels)

        cleaned_docs = []
        for doc, res in zip(batch, results):
            top_label = res["labels"][0]
            top_score = res["scores"][0]

            if top_score >= confidence_threshold:
                doc["topic"] = top_label
            else:
                doc["topic"] = "Miscellaneous"

            # Remove unwanted fields
            doc.pop("category", None)
            doc.pop("cluster", None)
            doc.pop("score", None)

            cleaned_docs.append(doc)
            print(f"Processed {doc.get('_id')} | Topic: {doc['topic']}")

        # Bulk insert
        if cleaned_docs:
            output_collection.insert_many(cleaned_docs)

if __name__ == "__main__":
    main()

